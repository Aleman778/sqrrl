
struct Input_Button_State {
    s32 num_half_transitions;
    bool ended_down;
}

struct Input_Gamepad {
    v2 left_stick;
    v2 right_stick;
    
    bool is_connected;
}

// ASCII uppercase letters
#define KEY_A 0x41
#define KEY_B 0x42
#define KEY_C 0x43
#define KEY_D 0x44
#define KEY_E 0x45
#define KEY_F 0x46
#define KEY_G 0x47
#define KEY_H 0x48
#define KEY_I 0x49
#define KEY_J 0x4A
#define KEY_K 0x4B
#define KEY_L 0x4C
#define KEY_M 0x4D
#define KEY_N 0x4E
#define KEY_O 0x4F
#define KEY_P 0x50
#define KEY_Q 0x51
#define KEY_R 0x52
#define KEY_S 0x53
#define KEY_T 0x54
#define KEY_U 0x55
#define KEY_V 0x56
#define KEY_W 0x57
#define KEY_X 0x58
#define KEY_Y 0x59
#define KEY_Z 0x60

#define KEY_COUNT 0xFF

struct Input {
    [KEY_COUNT]Input_Button_State keyboard_state;
    
    [4]Input_Gamepad gamepads;
    
    
}

global Input* g_input;

#define check_input_lib assert(g_input, "Input library has not been initialzed yet.")

bool
was_key_pressed(int key) {
    check_input_lib;
    Input_Button_State* state = &g_input.keyboard_state[key];
    return (state.num_half_transitions > 1 ||
            (state.num_half_transitions == 1 && state.ended_down));
}

bool
was_key_released(int key) {
    check_input_lib;
    Input_Button_State* state = &g_input.keyboard_state[key];
    return (state.num_half_transitions > 1 ||
            (state.num_half_transitions == 1 && !state.ended_down));
}

bool
is_key_down(int key) {
    check_input_lib;
    Input_Button_State* state = &g_input.keyboard_state[key];
    return state.ended_down;
}
