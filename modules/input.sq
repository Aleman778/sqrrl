
struct Input_Button_State {
    s32 num_half_transitions;
    bool ended_down;
}

struct Input_Gamepad {
    v2 left_stick;
    v2 right_stick;
    
    bool is_connected;
}

// Keyboard keys
#define KEY_A 0x41
#define KEY_B 0x42
#define KEY_C 0x43
#define KEY_D 0x44
#define KEY_E 0x45
#define KEY_F 0x46
#define KEY_G 0x47
#define KEY_H 0x48
#define KEY_I 0x49
#define KEY_J 0x4A
#define KEY_K 0x4B
#define KEY_L 0x4C
#define KEY_M 0x4D
#define KEY_N 0x4E
#define KEY_O 0x4F
#define KEY_P 0x50
#define KEY_Q 0x51
#define KEY_R 0x52
#define KEY_S 0x53
#define KEY_T 0x54
#define KEY_U 0x55
#define KEY_V 0x56
#define KEY_W 0x57
#define KEY_X 0x58
#define KEY_Y 0x59
#define KEY_Z 0x60
#define KEY_ESCAPE 0x1B

#define KEY_COUNT 0xFF

// Mouse buttons
#define MOUSE_LEFT 0x01
#define MOUSE_RIGHT 0x02
#define MOUSE_MIDDLE 0x04
#define MOUSE_X1 0x05
#define MOUSE_X2 0x06
#define MOUSE_BUTTON_COUNT 0x07

struct Input {
    [KEY_COUNT]Input_Button_State keyboard_state;
    
    [4]Input_Gamepad gamepads;
    
    [MOUSE_BUTTON_COUNT]Input_Button_State mouse_button_state;
    s32 mouse_x, mouse_y;
    s32 mouse_dx, mouse_dy;
    f32 mouse_wheel_delta;
}

global Input* g_input;

#define check_input_lib assert(g_input, "Input library has not been initialzed yet.")

internal inline bool
is_button_pressed(Input_Button_State* state) {
    return (state.num_half_transitions > 1 ||
            (state.num_half_transitions == 1 && state.ended_down));
}

internal inline bool
is_button_released(Input_Button_State* state) {
    return (state.num_half_transitions > 1 ||
            (state.num_half_transitions == 1 && !state.ended_down));
}

internal inline bool
is_button_down(Input_Button_State* state) {
    return state.ended_down;
}

bool
is_key_pressed(s32 key) {
    check_input_lib;
    Input_Button_State* state = &g_input.keyboard_state[key];
    return is_button_pressed(state);
}

bool
is_key_released(s32 key) {
    check_input_lib;
    Input_Button_State* state = &g_input.keyboard_state[key];
    return is_button_released(state);
    
}

bool
is_key_down(s32 key) {
    check_input_lib;
    Input_Button_State* state = &g_input.keyboard_state[key];
    return is_button_down(state)
}

bool
is_mouse_pressed(s32 button) {
    check_input_lib;
    Input_Button_State* state = &g_input.mouse_button_state[button];
    return is_button_pressed(state);
}

bool
is_mouse_released(s32 button) {
    check_input_lib;
    Input_Button_State* state = &g_input.mouse_button_state[button];
    return is_button_released(state);
}

bool
is_mouse_down(s32 button) {
    check_input_lib;
    Input_Button_State* state = &g_input.mouse_button_state[button];
    return is_button_down(state);
}

s32
get_mouse_x() {
    check_input_lib;
    return g_input.mouse_x;
}

s32
get_mouse_y() {
    check_input_lib;
    return g_input.mouse_y;
}

s32
get_mouse_dx() {
    check_input_lib;
    return g_input.mouse_dx;
}

s32
get_mouse_dy() {
    check_input_lib;
    return g_input.mouse_dy;
}

f32
get_mouse_wheel_delta() {
    check_input_lib;
    return g_input.mouse_wheel_delta;
}