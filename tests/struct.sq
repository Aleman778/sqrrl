#include <test_support.sq>

struct RecChild {
    int x;
    int y;
}

struct RecParent {
    RecChild c;
    int z;
}

void
@test_proc
recursive_struct_literals() {
    int x = 10;
    int y = 20;
    int z = 30;
    
    RecParent f = { { x, y }, z };
    assert(f.c.x + f.c.y + f.z == 60);
}


struct Soa {
    [3]int ints;
    [3]f32 floats;
}

void
@test_proc @dump_bytecode
soa_struct_initializer() {
    int x = 50;
    f32 y = 20.5f;
    Soa s = { floats: { 10.5f, y, 30.5f }, ints: { 55, 20, x } };
    assert(s.ints[2] == x);
    assert(s.floats[1] == y);
}


struct Game_Summary {
    int id;
    string name;
    f32 review_score;
}

void
@test_proc
aos_struct_initializer() {
    f32 review_scope0 = 4.3f;
    string name1 = "My awesome game!";
    int id2 = 609;
    
    []Game_Summary catalog = {
        { id: 131, review_score: review_scope0 },
        { id: 552, name: name1, review_score: 3.2f },
        { id: id2, review_score:  3.7f },
    };
    
    assert(catalog[0].review_score == review_scope0);
    assert(catalog[1].name.data == name1.data);
    assert(catalog[2].id == 609);
}

struct v4s {
    s32 x;
    s32 y;
    s32 z;
    s32 w;
}

void
@test_proc
struct_assignment_from_ptr_deref() {
    v4s foo = {z: 10};
    v4s* pfoo = &foo;
    v4s bar = *pfoo;
    foo.z = 20; // won't overwrite bar
    
    assert(bar.z == 10);
}

void
@test_proc
struct_assignment_assigning_from_and_to_ptr_deref() {
    [2]v4s foo = {};
    foo[0].x = 10;
    foo[0].y = 30;
    foo[0].w = 21;
    foo[1].x = 20;
    foo[1].y = 40;
    foo[1].w = 32;
    
    v4s* zero = &foo[0];
    v4s* one = &foo[1];
    int* zero_w = &zero.w;
    *zero = *one;
    
    assert(*zero_w == 32);
}
