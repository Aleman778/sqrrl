
void
@test_proc
fixed_array_count() {
    []int v = { 10, 20, 30, 40 };
    []int w = cast([]int) v; // trick the compiler into thinking it's not known sized array
    assert(w.count == 4);
}

void
@test_proc
fixed_array_count_inplace() {
    []int v = { 10, 20, 30, 40 };
    assert(v.count == 4);
}

void
@test_proc
fixed_array_access() {
    []int v = { 10, 20, 30, 40 };
    []int w = cast([]int) v; // trick the compiler into thinking it's not known sized array
    assert(w[0] == 10);
    assert(w[2] == 30);
}

void
@test_proc
fixed_array_access_inplace() {
    []int v = { 10, 20, 30, 40 };
    assert(v[0] == 10);
    assert(v[2] == 30);
}

void
@test_proc
fixed_array_access_var_index() {
    []int v = { 10, 20, 30, 40 };
    []int w = cast([]int) v; // trick the compiler into thinking it's not known sized array
    int i0 = 0;
    int i2 = 2;
    assert(w[i0] == 10);
    assert(w[i2] == 30);
}

void
@test_proc
fixed_array_access_var_index_inplace() {
    []int v = { 10, 20, 30, 40 };
    int i0 = 0;
    int i2 = 2;
    assert(v[i0] == 10);
    assert(v[i2] == 30);
}

void
@test_proc
fixed_array_access_via_ptr() {
    []int v = { 10, 20, 30, 40 };
    []int w = cast([]int) v; // trick the compiler into thinking it's not known sized array
    assert(*(w.data + 2) == 30);
    assert(*(w.data + 2) == 30);
}

void
@test_proc
fixed_array_access_via_ptr_inplace() {
    []int v = { 10, 20, 30, 40 };
    assert(*(v.data + 2) == 30);
    assert(*(v.data + 2) == 30);
}

int
find_smallest_in_fixed_array([]int v) {
    if (v.count == 0) {
        return 0;
    }
    
    int result = v[0];
    for (int i = 1; i < v.count; i++) {
        if (v[i] < result) {
            result = v[i];
        }
    }
    return result;
}

int
sum_of_fixed_array([]int v) {
    int sum = 0;
    for (int i = 0; i < v.count; i++) {
        sum += v[i];
    }
    return sum;
}

void
@test_proc
fixed_array_compute_sum() {
    []int v = { 10, 20, 30, 40 };
    int sum = sum_of_fixed_array(([]int) v);
    assert(sum == 100);
}

void
@test_proc
fixed_array_compute_smallest() {
    []int v = { 20, 10, 4, 30 };
    int smallest = find_smallest_in_fixed_array(([]int) v);
    assert(smallest == 4);
}