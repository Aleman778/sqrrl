
enum Type_Kind {
    Unresolved,
    Void,
    Any,
    Type,
    Basic,
    Array,
    Struct,
    Union,
    Enum,
    Function,
    Pointer,
};

enum Basic_Type_Info {
    Bool,
    S8,
    S16,
    S32,
    S64,
    U8,
    U16,
    U32,
    U64,
    F32,
    F64,
    String,
    CString
}

struct Type_Info {
    Type_Kind kind;
    
    union {
        Basic_Type_Info Basic;
        Struct_Type_Info Struct;
        Array_Type_Info Array;
    };
}

struct Struct_Field_Info {
    Type_Info* type;
    string ident;
    s64 offset;
}

struct Struct_Type_Info {
    string ident;
    []Struct_Field_Info fields;
}

struct Array_Type_Info {
    Type_Info* elem_type;
    smm elem_size;
    smm fixed_count; // -1 => if value stores the count
}

inline Type_Info*
type_info(Type type) {
    return (Type_Info*) type;
}

void
print_newline_with_spaces(int count) {
    print("\n");
    for (int i = 0; i < count; i++) {
        print(" ");
    }
}

void
print_data_from_type_info(Type_Info* type, void* data, int indent=0) {
    switch (type.kind) {
        case Type_Kind.Basic: {
            switch (type.Basic) {
                case Basic_Type_Info.Bool: {
                    if (*((bool*) data)) {
                        print("true")
                    } else {
                        print("false")
                    }
                }
                
                case Basic_Type_Info.S8: {
                    print("%", *((s8*) data));
                }
                
                case Basic_Type_Info.S16: {
                    print("%", *((s16*) data));
                }
                
                case Basic_Type_Info.S32: {
                    print("%", *((s32*) data));
                }
                
                case Basic_Type_Info.S64: {
                    print("%", *((s64*) data));
                }
                
                case Basic_Type_Info.U8: {
                    print("%", *((u8*) data));
                }
                
                case Basic_Type_Info.U16: {
                    print("%", *((s16*) data));
                }
                
                case Basic_Type_Info.U32: {
                    print("%", *((u32*) data));
                }
                
                case Basic_Type_Info.U64: {
                    print("%", *((s64*) data));
                }
                
                case Basic_Type_Info.F32: {
                    print("%", *((f32*) data));
                }
                
                case Basic_Type_Info.F64: {
                    print("%", *((f64*) data));
                }
                
                case Basic_Type_Info.String: {
                    print("%", *((string*) data));
                }
                
                case Basic_Type_Info.CString: {
                    print("%", *((cstring*) data));
                }
            }
        }
        
        case Type_Kind.Array: {
            print("{ ");
            
            smm count = type.Array.fixed_count;
            if (count < 0) {
                count = *((smm*) data);
            }
            
            for (int array_index = 0; 
                 array_index < count && array_index < 10; 
                 array_index++) {
                
                smm offset = type.Array.elem_size*array_index;
                
                print_data_from_type_info(type.Array.elem_type, (u8*) data + offset, indent + 4);
                if (array_index + 1 < count) {
                    print(", ");
                }
            }
            
            if (count >= 10) {
                print("...");
            }
            
            print(" }");
        }
        
        case Type_Kind.Union:
        case Type_Kind.Struct: {
            print("{");
            indent += 4;
            for (int field_index = 0; field_index < type.Struct.fields.count; field_index++) {
                Struct_Field_Info field = type.Struct.fields[field_index];
                print_newline_with_spaces(indent);
                print("%: ", field.ident);
                print_data_from_type_info(field.type,  (u8*) data + field.offset, indent);
                
                if (field_index + 1 < type.Struct.fields.count) {
                    print(", ");
                }
            }
            indent -= 4;
            print_newline_with_spaces(indent);
            print("}");
        }
    }
    
    if (indent == 0) {
        print("\n");
    }
}

#define print_var(var) \
print_data_from_type_info(type_of(var), &var);