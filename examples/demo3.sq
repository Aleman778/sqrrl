
#if 0

int
test_binary_expressions() {
    int x = 10;
    x = x + 20;
    return x;
}

int
test_add(int x, int y) {
    return x + y;
}

int
test_many_parameters(int a, int b, int c, int d, int e, int f) {
    return a + b + c + d + e + f;
}

#endif

int
main() {
#if 0
    int x = 10;
    if (x == 10) {
        return 20 / x; // expects: 2
    } else {
        return x; // expects: not executed
    }
    
#elif 0
    int x = 10;
    int y = 0;
    for (int i = 0; i < x; i += 1) {
        y += 2;
    }
    
    return y; // expects: 20
    
#elif 0
    int x = 0;
    while (x < 25) {
        x += 1;
    }
    return x; // expects: 25
    
#elif 0
    // Truncating integers
    s64 x = (s64) 140234230023;
    return (int) x; // expects: -1499690745
    
#elif 0
    // Sign extends and wrapping integers
    s8 x = (s8) -10;
    x += (s8) 200;
    
    int y = (int) x;
    return y; // expects: -66
    
#elif 0
    // Add operator
    int x = 10;
    int x = x + 10;
    return x; // expects: 20
    
#elif 0
    // And operator
    bool x = true;
    bool x = x && true;
    return (int) x; // expects: true (1)
    
#elif 0
    // Or operator
    bool x = false;
    bool x = x || true;
    return (int) x; // expects: true (1)
    
#elif 0
    // Equals operator
    int x = 10;
    bool y = x == 10;
    return (int) y; // expects: 1
    
#elif 0
    // Function call
    return test_binary_expressions(); // expects: 30
    
#elif 0
    // Function call with arguments
    return test_add(10, 20); // expects: 30
    
#elif 0
    // Function call with arguments
    return test_many_parameters(1, 2, 3, 4, 5, 6); // expects: 21
    
#elif 1
    // Pointers
    int x = 10;
    int* p = &x;
    *p += 1;
    return x; // expects: 11
    
#elif 0
    // Boolean expressions
    int count = 0;
    bool x = false;
    
    if (!x) {
        count += 1; // Yes
    }
    
    if (x && true) {
        count += 1; // No
    }
    
    if (x && false) {
        count += 1; // No
    }
    
    if (x || false) {
        count += 1; // No
    }
    
    if (x || true) {
        count += 1; // Yes
    }
    
    if ((x || true) && (count == 2)) {
        count += 1; // Yes
    }
    
    return count; // expects: 3
#endif
}