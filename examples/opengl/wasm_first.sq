//#include "../../platformer/code/win32_platform.cpp"
//#include "../../doom/code/first.sq"
//#include "../examples/raytracer/first.cpp"
//#include "../examples/opengl/first.sq"

#if 0
#include "data_packer.sq"

#else 

#include "../examples/opengl/renderer_opengl.sq"

//#define PRINT_AST 1
#define PRINT_BYTECODE 1

#define pln(format, ...) print(format##"\n", __VA_ARGS__)
@link("basic") extern void print(string str, ...);

@link("window") extern void start_main_loop(void cb()*);
@link("window") extern void stop_main_loop();

//@link("window") extern void* read_entire_file(string filename, u32* size);

@link("math") extern f32 cos(f32 x);
@link("math") extern f32 sin(f32 x);
@link("math") extern f32 tan(f32 x);


s64 ptr = 0;

void*
alloc(s64 size) {
    void* result = ptr;
    ptr += size;
    return result;
}

void
free(void* data) {
    ptr = 0;
}


f32 scale = 1.0f;
GLint uniform_mvp_matrix;
GLint uniform_sampler;
GLuint tex;

void
update_and_render() {
    glClearColor(0.1f, 0.1f, 0.1f, 1.0f);
    glClear(GL_COLOR_BUFFER_BIT);
    
    [16]f32 mat;
    mat[0] = cos(scale);
    mat[5] = sin(scale);
    mat[10] = 1.0f;
    mat[15] = 1.0f;
    
    scale = scale - 0.01f;
    
    //mat[0] = cos(3.0f);
    glUniformMatrix4fv(uniform_mvp_matrix, 1, false, mat.data);
    
    // Setup texture 0
    glActiveTexture(GL_TEXTURE0);
    glBindTexture(GL_TEXTURE_2D, tex);
    glUniform1i(uniform_sampler, 0);
    
    glDrawArrays(GL_TRIANGLE_STRIP, 0, 3);
}

int
main() {
    print("WebGL Example");
    
    webgl_canvas_init();
    
#define VS_SOURCE \
"#version 300 es\n" \
"in vec4 pos;\n" \
"in vec2 texcoord;\n" \
"uniform mat4 mvp_matrix;\n" \
"out vec2 frag_texcoord;\n" \
"void main() {\n" \
"  gl_Position = mvp_matrix*pos;\n" \
"  frag_texcoord = texcoord;\n" \
"}\n"
    
#define FS_SOURCE \
"#version 300 es\n" \
"precision highp float;\n" \
"in vec2 frag_texcoord;\n" \
"uniform sampler2D tex;\n" \
"out vec4 frag_color;\n" \
"void main() {\n" \
"  frag_color = texture(tex, frag_texcoord);\n" \
"}\n"
    
    // texture(sampler, gl_FragCoord.xy);\n" \
        //"  gl_FragColor = vec4(gl_FragCoord.y/640.0 + 0.5, gl_FragCoord.x/480.0, 0.0, 1.0);\n" \
    
    print("Compile shader");
    
    int shader = opengl_compile_shader_program(VS_SOURCE, FS_SOURCE);
    int attrib_pos = glGetAttribLocation(shader, "pos");
    int attrib_texcoord = glGetAttribLocation(shader, "texcoord");
    uniform_mvp_matrix = glGetUniformLocation(shader, "mvp_matrix");
    uniform_sampler = glGetUniformLocation(shader, "tex");
    glUseProgram(shader);
    print("Compile shader done");
    
    []f32 pos = { 
        -1.0f, -1.0f, 0.0f, 0.0f, 
        0.0f, 1.0f, 0.5f, 1.0f,
        1.0f, -1.0f, 1.0f, 0.0f,
    };
    GLuint vao;
    glGenBuffers(1, &vao);
    glBindBuffer(GL_ARRAY_BUFFER, vao);
    glBufferData(GL_ARRAY_BUFFER, sizeof(pos), pos.data, GL_STATIC_DRAW);
    glVertexAttribPointer(attrib_pos,      2, GL_FLOAT, false, 4*sizeof(f32), 0);
    glVertexAttribPointer(attrib_texcoord, 2, GL_FLOAT, false, 4*sizeof(f32), 2*sizeof(f32));
    glEnableVertexAttribArray(attrib_pos);
    glEnableVertexAttribArray(attrib_texcoord);
    
    
    []u8 tmp_image = { 
        0, 125, 255, 255, 255, 125, 0, 255,
        255, 125, 0, 255, 0, 125, 255, 255,
    };
    
    tex = opengl_create_texture(tmp_image.data, 2, 2, 4);
    opengl_set_texture_filter(Texture_Filter.Point);
    opengl_set_texture_wrap(Texture_Wrap.Clamp);
    
    webgl_fetch_tex2d(GL_TEXTURE_2D, 0, GL_RGBA, "grass.jpg");
    
    //u32 data_size = 0;
    //void* data = read_entire_file("grass.jpg", &data_size);
    
    start_main_loop(&update_and_render);
    
    return 0;
}

#endif