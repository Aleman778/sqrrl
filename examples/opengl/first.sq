#include <basic.sq>
#include <input.sq>
#include <window.sq>
#include <stb_image.sq>
#include <stb_truetype.sq>

// TODO(Alexander): COMPILER BUG: opengl.sq has to be loaded last messes up the import directory table
#include <opengl.sq>

#include "math.sq"


#define RED (v4) { 1.0f, 0.0f, 0.0f, 1.0f }
#define GREEN (v4) { 0.0f, 1.0f, 0.0f, 1.0f }
#define WHITE (v4) { 1.0f, 1.0f, 1.0f, 1.0f }


string
win32_read_entire_file(cstring filename) {
    string result;
    HANDLE file_handle = CreateFileA(filename, GENERIC_READ, FILE_SHARE_READ, 0, OPEN_EXISTING, 0, 0);
    
    if (file_handle != INVALID_HANDLE_VALUE) {
        LARGE_INTEGER file_size;
        if (GetFileSizeEx(file_handle, &file_size)) {
            result.count = (u32) file_size.QuadPart;
            result.data = (u8*) VirtualAlloc(0, result.count, MEM_RESERVE|MEM_COMMIT, PAGE_READWRITE);
            
            if (result.data) {
                if (!ReadFile(file_handle, result.data, (u32) result.count, 0, 0)) {
                    // TODO(alexander): logging, failed read file
                }
                
            } else {
                // TODO(alexander): logging, failed to allocate memory
            }
            
        } else {
            // TODO(alexander): logging, failed to get file size
        }
        
        CloseHandle(file_handle);
    } else {
        // TODO(alexander): logging, file not found
    }
    
    return result;
}

void
win32_free_file_memory(void* memory) {
    VirtualFree(memory, 0, MEM_RELEASE);
}

int
compile_shader_from_file(int program, int shader_type, cstring filename) {
    int shader = glCreateShader(shader_type);
    string source = win32_read_entire_file(filename);
    cstring source_cstring = string_to_cstring(source);
    
    glShaderSource(shader, 1, cast(GLchar**) &source_cstring, 0);
    glCompileShader(shader);
    win32_free_file_memory(source.data);
    cstring_free(source_cstring);
    
    GLint success;
    glGetShaderiv(shader, GL_COMPILE_STATUS, &success);
    if (!success) {
        // TODO: COMPILER BUG: wasn't possible to just use a stack allocated array?!??!
        string message;
        message.data = (u8*) malloc(1024);
        message.count = 0;
        glGetShaderInfoLog(shader, 1024, cast(GLsizei*) &message.count, cast(GLchar*) message.data);
        pln("%: %", filename, message);
        free(message.data);
        return false;
    }
    
    glAttachShader(program, shader);
    return shader;
}

enum Render_Op {
    Draw_Triangles,
}

struct Vertex {
    v3 pos;
    v2 texcoord;
    v4 tint;
}

struct Render_Queue {
    
}

struct Render_Command {
    Render_Op op;
    
    Texture texture;
    
    m4x4 transform; // TODO: this should not be placed here
    
    union {
        Vertex* vertices;
        f32* vertex_data;
    };
    u16* indices;
    
    u32 vertex_data_size;
    u32 index_data_size;
    u32 vertex_count;
    u32 index_count;
}

struct Push_Buffer {
    [65536]u8 base;
    u32 used;
}

// NOTE(Alexander): align has to be a power of two.
#define is_power_of_two(x) (((x) & ((x) - 1)) == 0)
#define assert_power_of_two(x) assert(is_power_of_two(x) && "x is not power of two")
inline umm
align_forward(umm address, umm align) {
    assert_power_of_two(align);
    umm modulo = address & (align - 1);
    if (modulo != 0) {
        address += align - modulo;
    }
    return address;
}

void*
push_size(Push_Buffer* buf, umm size, umm align) {
    umm base_offset = (umm) buf.base.data + (umm) buf.used;
    umm offset = align_forward(base_offset, align) - (umm) buf.base.data;
    assert((smm) (offset + size) <= buf.base.count);
    buf.used = (u32) (offset + size);
    
    void* result = buf.base.data + offset;
    memset(result, 0, size);
    return result;
}

#define push_struct(buf, T) (T*) push_size(buf, sizeof(T), alignof(T))

Render_Command*
push_command(Push_Buffer* buf, Render_Op op) {
    Render_Command* command = push_struct(buf, Render_Command);
    command.op = op;
    command.vertex_data_size = 2048;
    command.index_data_size = 512;
    command.vertex_data = (f32*) push_size(buf, command.vertex_data_size, alignof(f32));
    command.indices = (u16*) push_size(buf, command.index_data_size, alignof(u16));
    return command;
}

struct OpenGL {
    GLuint vertex_array;
    
    union {
        struct {
            GLuint vertex_buffer;
            GLuint index_buffer;
        };
        [2]GLuint buffers;
    };
    
    GLuint program;
    GLuint uniform_texture;
    GLuint uniform_mvp;
}

void
init_opengl(OpenGL* opengl) {
    // Vertex array
    glGenVertexArrays(1, &opengl.vertex_array);
    glBindVertexArray(opengl.vertex_array);
    
    // Setup buffers
    glGenBuffers(opengl.buffers.count, cast(GLuint*) &opengl.buffers);
    
    // Enable depth testing
    glEnable(GL_DEPTH_TEST);
    glDepthFunc(GL_LESS);
    
    // Enable face culling
    //glEnable(GL_CULL_FACE);
    //glCullFace(GL_BACK);
    //glFrontFace(GL_CCW);
}

void
opengl_begin_drawing(OpenGL* opengl, Push_Buffer* buf) {
    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);  
    
    buf.used = 0;
}

void
opengl_end_drawing(OpenGL* opengl, Render_Command* command, m4x4 mvp_transform) {
    
    glBindVertexArray(opengl.vertex_array);
    glBindBuffer(GL_ARRAY_BUFFER, opengl.vertex_buffer);
    glBufferData(GL_ARRAY_BUFFER,
                 command.vertex_count*sizeof(Vertex), 
                 command.vertex_data, GL_DYNAMIC_DRAW);
    
    glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, opengl.index_buffer);
    glBufferData(GL_ELEMENT_ARRAY_BUFFER,
                 command.index_count*sizeof(s16), 
                 command.indices, GL_DYNAMIC_DRAW);
    
    glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, sizeof(Vertex), 0);
    glVertexAttribPointer(1, 2, GL_FLOAT, GL_FALSE, sizeof(Vertex), 3 * sizeof(f32));
    glVertexAttribPointer(2, 3, GL_FLOAT, GL_FALSE, sizeof(Vertex), 5 * sizeof(f32));
    glEnableVertexAttribArray(0);
    glEnableVertexAttribArray(1);
    glEnableVertexAttribArray(2);
    
    if (command.texture.is_valid) {
        glActiveTexture(GL_TEXTURE0);
        glBindTexture(GL_TEXTURE_2D, command.texture.handle);
    }
    
    glUseProgram(opengl.program);
    glUniform1i(opengl.uniform_texture, 0);
    
    glUniformMatrix4fv(opengl.uniform_mvp, 1, true, &mvp_transform.data[0]);
    
    glDrawElements(GL_TRIANGLES, command.index_count, GL_UNSIGNED_SHORT, 0);
    
}

inline void
push_vertex(Render_Command* command, v3 pos, v2 texcoord, v4 tint) {
    assert((command.vertex_count + 1) * sizeof(Vertex) < command.vertex_data_size);
    command.vertices[command.vertex_count].pos = (command.transform * vec4(pos, 1.0f)).xyz;
    command.vertices[command.vertex_count].texcoord = texcoord;
    command.vertices[command.vertex_count].tint = tint;
    command.vertex_count++;
}

inline void
push_indices(Render_Command* command, []u16 indices, u16 first_index=0) {
    assert((command.index_count + (u32) indices.count) * sizeof(u16) < command.index_data_size);
    for (int i = 0; i < indices.count; i++) {
        command.indices[command.index_count++] = first_index + indices[i];
    }
}


void
push_quad(Render_Command* command, v3 min_p, v3 right, v3 down, v4 tint) {
    []u16 indices = { 0, 1, 2, 1, 3, 2 };
    push_indices(command, ([]u16) indices, (u16) command.vertex_count);
    push_vertex(command, min_p,                vec2(0.0f, 0.0f), tint);
    push_vertex(command, min_p + right,        vec2(1.0f, 0.0f), tint);
    push_vertex(command, min_p + down,         vec2(0.0f, 1.0f), tint);
    push_vertex(command, min_p + right + down, vec2(1.0f, 1.0f), tint);
}

void
push_box(Render_Command* command, v3 size, v4 tint) {
    []u16 indices = { 
        0, 1, 2, 1, 3, 2, // front
        5, 4, 7, 4, 6, 7, // back
        4, 0, 6, 0, 2, 6, // left
        1, 5, 3, 5, 7, 3, // right
    };
    push_indices(command, ([]u16) indices, (u16) command.vertex_count);
    
    v3 min_p = vec3(-size.x*0.5f, -size.y*0.5f, -size.z*0.5f);
    v3 max_p = min_p + size;
    
    // Front
    push_vertex(command, min_p,                           vec2(0.0f, 0.0f), tint);
    push_vertex(command, vec3(max_p.x, min_p.y, min_p.z), vec2(1.0f, 0.0f), tint);
    push_vertex(command, vec3(min_p.x, max_p.y, min_p.z), vec2(0.0f, 1.0f), tint);
    push_vertex(command, vec3(max_p.x, max_p.y, min_p.z), vec2(1.0f, 1.0f), tint);
    
    // Back
    push_vertex(command, vec3(min_p.x, min_p.y, max_p.z), vec2(1.0f, 0.0f), tint);
    push_vertex(command, vec3(max_p.x, min_p.y, max_p.z), vec2(0.0f, 0.0f), tint);
    push_vertex(command, vec3(min_p.x, max_p.y, max_p.z), vec2(1.0f, 1.0f), tint);
    push_vertex(command, vec3(max_p.x, max_p.y, max_p.z), vec2(0.0f, 1.0f), tint);
    
    // Top
    push_quad(command, 
              vec3(min_p.x, max_p.y, min_p.z), 
              vec3(size.x, 0.0f, 0.0f), vec3(0.0f, 0.0f, size.z), tint);
    
    // Bottom
    push_quad(command, vec3(max_p.x, min_p.y, min_p.z), 
              vec3(-size.x, 0.0f, 0.0f), vec3(0.0f, 0.0f, size.z), tint);
}

struct Image {
    int width;
    int height;
    int num_components;
    u8* data;
}

Image
load_image(string filename) {
    Image result;
    cstring cfilename = string_to_cstring(filename);
    u8* data = stbi_load(cfilename, &result.width, &result.height, &result.num_components, 0);
    cstring_free(cfilename);
    
    if (!data) {
        pln("Failed to load image `%`", filename);
    }
    
    result.data = data;
    return result;
}

struct Texture {
    GLuint handle;
    Image raw;
    bool is_valid;
}


Texture
create_texture(Image image,
               int min_filter=GL_LINEAR, 
               int mag_filter=GL_LINEAR, 
               int wrap_s=GL_REPEAT, 
               int wrap_t=GL_REPEAT) {
    
    
    Texture result;
    result.raw = image;
    glGenTextures(1, &result.handle);
    
    glBindTexture(GL_TEXTURE_2D, result.handle);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, wrap_s);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, wrap_t);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, min_filter);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, mag_filter);
    
    GLenum format;
    switch (image.num_components) {
        case 1: { format = GL_RED; }
        case 2: { format = GL_RG; }
        case 3: { format = GL_RGB; }
        case 4: { format = GL_RGBA; }
    }
    
    glTexImage2D(GL_TEXTURE_2D, 0, GL_RGB, image.width, image.height, 0,
                 format, GL_UNSIGNED_BYTE, image.data); // TODO: do we want ALPHA component in the internal_format?
    
    result.is_valid = true;
    
    return result;
}

Texture
create_texture_from_subimage(Image subimage,
                             int offset_x, int offset_y,
                             int full_width, int full_height,
                             int min_filter=GL_LINEAR, 
                             int mag_filter=GL_LINEAR, 
                             int wrap_s=GL_REPEAT, 
                             int wrap_t=GL_REPEAT) {
    
    
    Texture result;
    result.raw = subimage;
    glGenTextures(1, &result.handle);
    
    glBindTexture(GL_TEXTURE_2D, result.handle);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, wrap_s);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, wrap_t);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, min_filter);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, mag_filter);
    
    GLenum format;
    switch (subimage.num_components) {
        case 1: { format = GL_RED; }
        case 2: { format = GL_RG; }
        case 3: { format = GL_RGB; }
        case 4: { format = GL_RGBA; }
    }
    
    glTexImage2D(GL_TEXTURE_2D, 0, GL_RGB, full_width, full_height, 0,
                 format, GL_UNSIGNED_BYTE, 0); // TODO: do we want ALPHA component in the internal_format?
    
    glTexSubImage2D(GL_TEXTURE_2D, 0, offset_x, offset_y, subimage.width, subimage.height,
                    format, GL_UNSIGNED_BYTE, subimage.data);
    
    result.is_valid = true;
    
    return result;
}

inline Texture
load_texture(string filename,
             int min_filter=GL_LINEAR, 
             int mag_filter=GL_LINEAR, 
             int wrap_s=GL_REPEAT, 
             int wrap_t=GL_REPEAT) {
    
    Image image = load_image(filename);
    return create_texture(image, min_filter, mag_filter, wrap_s, wrap_s);
}
struct Font {
    Texture texture;
    
    stbtt_fontinfo info;
    bool is_valid;
}

Font
load_font(string filename) {
    Font result;
    
    cstring cfilename = string_to_cstring(filename);
    string font = win32_read_entire_file(cfilename);
    cstring_free(cfilename);
    
    if (!font.data) {
        return result;
    }
    
    int file_offset = stbtt_GetFontOffsetForIndex(font.data, 0);
    if (!stbtt_InitFont(&result.info, font.data, file_offset)) {
        return result;
    }
    
    f32 font_scale = stbtt_ScaleForPixelHeight(&result.info, 50);
    
    int c = 'a';
    Image image;
    image.data = stbtt_GetCodepointBitmap(&result.info, 0, font_scale, c, 
                                          &image.width, &image.height, 0,0);
    
    int output_size = 64;//max(image.width, image.height);
    u8* output = (u8*) calloc(1, output_size*output_size);
    int x_offset = (output_size - image.width) / 2;
    int y_offset = (output_size - image.height) / 2;
    
    string pixel_map = " .:ioVM@";
    int row_index = y_offset * output_size+ x_offset;
    for (int j = image.height - 1; j > 0; j--) {
        row_index += output_size;
        for (int i = 0; i < image.width; i++) {
            output[row_index + i] = image.data[j*image.width+i];
            //string chr_string;
            //chr_string.data = &chr;
            //chr_string.count = 1;
            //print("%", chr_string);
        }
        
        print("\n")
    }
    image.width = output_size;
    image.height = output_size;
    image.data = output;
    image.num_components = 1;
    
    int full_size = 32;//max(image.width, image.height);
    pln("full_size = %", full_size);
    result.texture = create_texture(image);
    result.is_valid = true;
    
    
    return result;
}

void
push_text(Render_Command* command, Font font, string text) {
    if (!font.is_valid) return;
}

struct AABB {
    v3 min_p;
    v3 max_p;
}

bool
aabb_intersects_aabb(AABB a, AABB b) {
    return (a.min_p.x <= b.max_p.x &&
            a.max_p.x >= b.min_p.x &&
            a.min_p.y <= b.max_p.y &&
            a.max_p.y >= b.min_p.y &&
            a.min_p.z <= b.max_p.z &&
            a.max_p.z >= b.min_p.z);
}


int
main() {
    
    f32 aspect_ratio = 16.0f / 9.0f;
    int height = 720;
    int width = (int) ((f32) height * aspect_ratio);
    
    init_window(width, height, "OpenGL Test");
    
    Push_Buffer* push_buffer = (Push_Buffer*) calloc(1, sizeof(Push_Buffer)); // 64k
    
    OpenGL* opengl = (OpenGL*) calloc(1, sizeof(OpenGL));
    init_opengl(opengl);
    
    Texture texture_crate = load_texture("../examples/opengl/crate.jpg");
    Texture texture_grass = load_texture("../examples/opengl/grass.jpg");
    Font font_arial = load_font("c:/windows/fonts/arialbd.ttf");
    
    // Setup shaders
    opengl.program = glCreateProgram();
    int vs = compile_shader_from_file(opengl.program, GL_VERTEX_SHADER, "../examples/opengl/test.vs");
    int fs = compile_shader_from_file(opengl.program, GL_FRAGMENT_SHADER, "../examples/opengl/test.fs");
    if (vs && fs) {
        int success;
        glLinkProgram(opengl.program);
        glDeleteShader(vs);
        glDeleteShader(fs);
        
        glGetProgramiv(opengl.program, GL_LINK_STATUS, &success);
        if (!success) {
            string message;
            message.data = (u8*) malloc(1024);
            message.count = 0;
            glGetProgramInfoLog(opengl.program, 1024, cast(GLsizei*) &message.count, cast(GLchar*) message.data);
            pln("%", message);
            free(message.data);
            
            ExitProcess(0);
        }
    } else {
        ExitProcess(0);
    }
    opengl.uniform_texture = glGetUniformLocation(opengl.program, (GLchar*) string_to_cstring("u_texture"));
    opengl.uniform_mvp = glGetUniformLocation(opengl.program, (GLchar*) string_to_cstring("u_mvp"));
    
    v2 screen_size;
    
    f32 pan_x;
    f32 pan_y;
    f32 scale;
    v3 player_p;
    v3 velocity;
    v3 acceleration;
    
    v3 pos;
    
    scale = 4.0f;
    pan_x = 0;
    pan_y = -45.0f;
    {
        f32 look_at_angle = degrees_to_radians(pan_x);
        f32 look_up_angle = degrees_to_radians(-pan_y);
        pos.x = player_p.x + scale*(cos(look_at_angle) * cos(look_up_angle));
        pos.y = player_p.y + scale*sin(look_up_angle);
        pos.z = player_p.z + scale*(sin(look_at_angle) * cos(look_up_angle));
    }
    
    bool mouse_lock;
    
    
    
    
    AABB player_aabb;
    AABB red_box_aabb;
    red_box_aabb.min_p = vec3(1.0f, 0.0f, 1.0f);
    red_box_aabb.max_p = red_box_aabb.min_p + vec3(1.0f, 1.0f, 1.0f);
    
    
    while (!window_should_close()) {
        screen_size.width = get_window_width();
        screen_size.height = get_window_height();
        aspect_ratio = screen_size.width / screen_size.height;
        
        //if (is_mouse_down(MOUSE_RIGHT)) {
        f32 look_at_angle = degrees_to_radians(pan_x);
        f32 look_up_angle = degrees_to_radians(-pan_y);
        //pln("% (%) => x=%, y=%", look_at_angle, pan_x, cos(look_at_angle), sin(look_at_angle));
        
        f32 walk_angle = 0.0f;
        f32 walk_speed = 0.0f;
        
        
        if (is_mouse_pressed(MOUSE_LEFT)) {
            mouse_lock = true;
        }
        if (is_key_pressed(KEY_ESCAPE)) {
            mouse_lock = false;
        }
        if (mouse_lock) {
            set_mouse_position(screen_size*0.5);
            
            f32 max_walk_speed = 0.05f;
            if (is_key_down(KEY_SHIFT)) {
                max_walk_speed *= 2.0f;
            }
            
            if (is_key_down(KEY_W)) {
                walk_speed += max_walk_speed;
                walk_angle = look_at_angle;
            }
            
            if (is_key_down(KEY_S)) {
                walk_speed -= max_walk_speed;
                walk_angle = look_at_angle;
            }
            
            if (is_key_down(KEY_A)) {
                if (walk_speed == 0.0f) {
                    walk_speed = max_walk_speed;
                }
                if (walk_angle == 0.0f) {
                    walk_angle = look_at_angle + PI_F32/2.0f;
                } else {
                    walk_angle += sign(walk_speed) * PI_F32/4.0f;
                }
            }
            
            if (is_key_down(KEY_D)) {
                if (walk_speed == 0.0f) {
                    walk_speed = max_walk_speed;
                }
                if (walk_angle == 0.0f) {
                    walk_angle = look_at_angle - PI_F32/2.0f;
                } else {
                    walk_angle -= sign(walk_speed) * PI_F32/4.0f;
                }
            }
            
            if (is_key_pressed(KEY_SPACE)) {
                velocity.y = 5.05f;
            }
            
            // Update camera
            pan_x -= get_mouse_dx();
            pan_y -= get_mouse_dy();
            
            pan_y = min(89.0f, max(pan_y, -89.0f));
            //}
            scale = max(scale - 1.0f*get_mouse_wheel_delta(), 0.2f);
        }
        
        pos.x = player_p.x + scale*(cos(look_at_angle) * cos(look_up_angle));
        pos.y = player_p.y + scale*sin(look_up_angle);
        pos.z = player_p.z + scale*(sin(look_at_angle) * cos(look_up_angle));
        
        //
        // Update player movement
        //
        f32 curr_speed = length(vec3(velocity.x, 0.0f, velocity.z));
        f32 curr_angle = atan(velocity.x / velocity.z);
        const f32 max_speed = 3.0f;
        if (curr_speed >= max_speed) {
            walk_speed = -0.05f * curr_angle;// * sign();
        }
        pln("walk_speed = %", walk_speed);
        
        acceleration.x -= walk_speed*cos(walk_angle);
        acceleration.z -= walk_speed*sin(walk_angle);
        
        if (abs(velocity.x) > 3.0f) {
            acceleration.x = 0.0f;
        }
        if (abs(velocity.z) > 3.0f) {
            acceleration.z = 0.0f;
        }
        
        acceleration.y = -8.0f; // gravity
        
        f32 delta_time = 1.0f/30.0f;
        
        v3 step_velocity = velocity * delta_time + acceleration * delta_time * delta_time * 0.5f;
        
        if (player_p.y + step_velocity.y < 0.0f) {
            step_velocity.y = -player_p.y;
            velocity.y = 0.0f;
        }
        
        // Collision detection and response
        player_aabb.min_p = player_p;
        player_aabb.max_p = player_p + vec3(1.0f, 1.0f, 1.0f);
        if (aabb_intersects_aabb(player_aabb, red_box_aabb)) {
            
            pln("INTERSECTION");
        }
        
        // Update player position
        &player_p += step_velocity;
        &velocity += acceleration * delta_time;
        
        
        
        //pos.y = -scale*sin(degrees_to_radians(pan_y));
        //pos.z = scale*cos(look_at_angle);//sin(look_at_angle);
        m4x4 view = m4x4_look_at(pos, player_p, vec3(0.0f, 1.0f, 0.0f));
        //view = m4x4_translate(vec3(pos.x, pos.y, pos.z))*view;
        //m4x4 view = m4x4_translate(vec3(0.0f, 0.0f, 3.0f));
        view = m4x4_inverse(view);
        view = view*m4x4_translate(vec3(-pos.x, -pos.y, -pos.z));
        
        m4x4 projection = m4x4_perspective(45, aspect_ratio, 0.001f, 1000.0f);
        //m4x4 projection = m4x4_orthographic(0.0f, 0.0f, screen_size.width, screen_size.height,
        //-99999.0f, 99999.0f);
        
        glViewport(0, 0, (int) screen_size.width, (int) screen_size.height);
        
        opengl_begin_drawing(opengl, push_buffer);
        
        Render_Command* command = push_command(push_buffer, Render_Op.Draw_Triangles);
        command.texture = texture_crate;
        
        command.transform = m4x4_translate(player_p);
        push_box(command, vec3(1.0f, 1.0f, 1.0f), WHITE);
        
        command.transform = m4x4_translate(vec3(1.0f, 0.0f, 1.0f));
        push_box(command, vec3(1.0f, 1.0f, 1.0f), RED);
        
        //command.transform = m4x4_translate(vec3(-1.0f, 0.0f, -1.0f));
        //push_box(command, vec3(1.0f, 1.0f, 1.0f), GREEN);
        
        Render_Command* command2 = push_command(push_buffer, Render_Op.Draw_Triangles);
        command2.texture = texture_grass;
        command2.transform = m4x4_identity();
        push_quad(command2, 
                  vec3(-3.0f, -0.51f, -3.0f),
                  vec3(6.0f, 0.0f, 0.0f),
                  vec3(0.0f, 0.0f, 6.0f), WHITE);
        
        Render_Command* command3 = push_command(push_buffer, Render_Op.Draw_Triangles);
        command3.transform = m4x4_translate(vec3(-1.0f, 0.0f, -1.0f));
        command3.texture = font_arial.texture;
        push_box(command3, vec3(1.0f, 1.0f, 1.0f), WHITE);
        
        glClearColor(0.05f, 0.1f, 0.4f, 1.0f);
        
        opengl_end_drawing(opengl, command, projection * view);
        opengl_end_drawing(opengl, command2, projection * view);
        opengl_end_drawing(opengl, command3, projection * view);
        
        window_swap_buffers();
    }
    
    ExitProcess(0);
}
