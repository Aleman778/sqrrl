
// Assert
#ifndef BASIC_NO_ASSERT_IMPLEMENTATION

#ifndef DISABLE_ASSERT
bool
__assert(cstring expression, string file, smm line) {
    // TODO(Alexander): improve assertion printing.
    print("%:%: Assertion failed: %\n", file, line, expression);
    //_put_string("Assertion failed!");
    //DEBUG_log_backtrace();
    
    // Flush the standard streams make sure we get all debug data
    //fflush(stdout);
    //fflush(stderr);
    
    *(int *)0 = 0; // NOTE(Alexander): purposefully trap the program
    return true;
}
#define assert(expr, ...) (void) ((expr) || __assert(#expr " - " __VA_ARGS__, __FILE__, __LINE__))
#else
#define assert(expr, ...)
#endif

#endif

// TODO(Alexander): this is the "C" way to do things, but when we have polymorph support
//                  in the future we should replace this then
//#define min(a, b) ((a) < (b) ? (a) : (b))
//#define max(a, b) ((a) > (b) ? (a) : (b))

#include <string_builder.sq>

// TODO(Alexander): we only have windows support atm. later on we import the correct header
#include <win32_basic.sq>

#define PI_F32 3.1415926535897932385f

f32
cos(f32 num) {
    return _cos_f32(num);
}

f32
acos(f32 num) {
    return _acos_f32(num);
}

f32
sin(f32 num) {
    return _sin_f32(num);
}

f32
asin(f32 num) {
    return _asin_f32(num);
}

f32
tan(f32 num) {
    return _tan_f32(num);
}

f32
atan(f32 num) {
    return _atan_f32(num);
}

f32
atan2(f32 y, f32 x) {
    return _atan2_f32(y, x);
}

f32
sqrt(f32 num) {
    return _sqrt_f32(num);
}

f32
round(f32 num) {
    return _round_f32(num);
}

f32
floor(f32 num) {
    return _floor_f32(num);
}

f32
ceil(f32 num) {
    return _ceil_f32(num);
}

f32
pow(f32 num, f32 power) {
    return _pow_f32(num, power);
}

f32
abs(f32 num) {
    // TODO(Alexander): we can perhaps optimize this?
    return num < 0.0f ? -num : num;
}

f32
min(f32 a, f32 b) {
    return a <= b ? a : b;
}

f32
max(f32 a, f32 b) {
    return a >= b ? a : b;
}

f32
random_f32() {
    return (f32) _random_s32() / (RAND_MAX + 1.0f);
}


f64
cos(f64 num) {
    return _cos_f64(num);
}

f64
acos(f64 num) {
    return _acos_f64(num);
}

f64
sin(f64 num) {
    return _sin_f64(num);
}

f64
asin(f64 num) {
    return _asin_f64(num);
}

f64
tan(f64 num) {
    return _tan_f64(num);
}

f64
atan(f64 num) {
    return _atan_f64(num);
}

f64
atan2(f64 y, f64 x) {
    return _atan2_f64(y, x);
}

f64
sqrt(f64 num) {
    return _sqrt_f64(num);
}

f64
round(f64 num) {
    return _round_f64(num);
}

f64
floor(f64 num) {
    return _floor_f64(num);
}

f64
ceil(f64 num) {
    return _ceil_f64(num);
}

f64
pow(f64 num, f64 power) {
    return _pow_f64(num, power);
}

f64
abs(f64 num) {
    // TODO(Alexander): we can perhaps optimize this?
    return num < 0.0f ? -num : num;
}

f64
min(f64 a, f64 b) {
    return a <= b ? a : b;
}

f64
max(f64 a, f64 b) {
    return a >= b ? a : b;
}


s32
abs(s32 num) {
    // TODO(Alexander): we can perhaps optimize this?
    return num < 0 ? -num : num;
}

s32
min(s32 a, s32 b) {
    return a <= b ? a : b;
}

s32
max(s32 a, s32 b) {
    return a >= b ? a : b;
}

smm
min(smm a, smm b) {
    return a <= b ? a : b;
}

smm
max(smm a, smm b) {
    return a >= b ? a : b;
}

#define sign(value) ((value) < 0 ? -1 : ((value) > 0 ? 1 : 0 ))


inline umm
cstring_count(cstring str) {
    if (!str) return 0;
    
    umm count = 0;
    u8* curr = (u8*) str;
    while (*curr) {
        count++;
        curr++;
    }
    return count;
}

inline cstring
string_to_cstring(string str, u8* dest=0) {
    u8* result = dest ? dest : (u8*) malloc(str.count + 1);
    memcpy(result, str.data, str.count);
    result[str.count] = 0;
    return (cstring) result;
}

inline string
cstring_to_string(cstring str) {
    string result;
    result.data = (u8*) str;
    result.count = cstring_count(str);
    return result;
}

inline void
cstring_free(cstring str) {
    free((void*) str);
}

struct Fixed_Array {
    void* data;
    smm count;
};

struct Dynamic_Array {
    void* data;
    smm count;
    smm capacity;
};

enum Type_Kind {
    Unresolved, // TODO: maybe this shouldn't be here?
    Void,
    Any,
    Type,
    Basic,
    Array,
    Struct,
    Union,
    Enum,
    Function,
    Pointer,
};

enum Basic_Type_Info {
    Bool,
    S8,
    S16,
    S32,
    S64,
    U8,
    U16,
    U32,
    U64,
    F32,
    F64,
    String,
    CString
}

struct Type_Info {
    Type_Kind kind;
    
    union {
        Basic_Type_Info Basic;
        Struct_Type_Info Struct;
        Enum_Type_Info Enum;
        Array_Type_Info Array;
    };
}

struct Struct_Field_Info {
    Type_Info* type;
    string ident;
    s64 offset;
}

struct Struct_Type_Info {
    string ident;
    []Struct_Field_Info fields;
}

struct Enum_Type_Info {
    string ident;
    Type_Info* type;
    []string names;
}

struct Array_Type_Info {
    Type_Info* elem_type;
    smm elem_size;
    smm fixed_count; // -1 => if value stores the count
}

struct Var_Arg {
    Type_Info* type;
    smm data_size;
}

struct Var_Args {
    u8* data;
    []Var_Arg types;
}

inline Type_Info*
to_type_info(Type type) {
    return (Type_Info*) type;
}

internal void
print_newline_with_spaces(String_Builder* sb, int count) {
    string_builder_push_char(sb, '\n');
    for (int i = 0; i < count; i++) {
        string_builder_push_char(sb, ' ');
    }
}

internal s64
data_to_s64(Basic_Type_Info info, void* data) {
    switch (info) {
        case Basic_Type_Info.S8: {
            return *((s8*) data);
        }
        
        case Basic_Type_Info.S16: {
            return *((s16*) data);
        }
        
        case Basic_Type_Info.S32: {
            return *((s32*) data);
        }
        
        case Basic_Type_Info.S64: {
            return *((s64*) data);
        }
    }
    
    return 0;
}

internal u64
data_to_u64(Basic_Type_Info info, void* data) {
    switch (info) {
        case Basic_Type_Info.U8: {
            return *((u8*) data);
        }
        
        case Basic_Type_Info.U16: {
            return *((u16*) data);
        }
        
        case Basic_Type_Info.U32: {
            return *((u32*) data);
        }
        
        case Basic_Type_Info.U64: {
            return *((u64*) data);
        }
    }
    
    return 0;
}

internal f64
data_to_f64(Basic_Type_Info info, void* data) {
    switch (info) {
        case Basic_Type_Info.F32: {
            return *((f32*) data);
        }
        
        case Basic_Type_Info.F64: {
            return *((f64*) data);
        }
    }
    
    return 0.0f;
}

internal void
string_print_unsigned_integer(String_Builder* sb, u64 integer) {
    if (integer == 0) {
        string_builder_push(sb, "0");
        return;
    }
    
    [20]u8 result;
    int ptr = result.count;
    
    while (integer > 0) {
        u8 digit = (u8) (integer % 10);
        result[--ptr] = '0' + digit;
        integer /= 10;
    }
    
    string s;
    s.data = &result[ptr];
    s.count = result.count - ptr;
    string_builder_push(sb, s);
}

internal void
string_print_unsigned_hex_integer(String_Builder* sb, u64 integer) {
    if (integer == 0) {
        string_builder_push(sb, "0");
        return;
    }
    [16]u8 result;
    int ptr = result.count;
    
    while (integer > 0) {
        u8 digit = (u8) (integer % 16);
        if (digit > 9) {
            result[--ptr] = 'A' + (digit - 10);
        } else {
            result[--ptr] = '0' + digit;
        }
        integer /= 16;
    }
    
    string s;
    s.data = &result[ptr];
    s.count = result.count - ptr;
    string_builder_push(sb, s);
}

internal void
string_print_signed_integer(String_Builder* sb, s64 integer) {
    if (integer < 0) {
        integer = -integer;
        string_builder_push(sb, "-");
    }
    
    u64 unsigned_integer = (u64) integer;
    string_print_unsigned_integer(sb, unsigned_integer);
}

internal void
string_print_floating_point(String_Builder* sb, f64 floating_point) {
    // TODO(Alexander): this is not the best implementation, improve this later
    // TODO(Alexander): we might have to make a separate print for f32 to get more accurate results
    
    if (floating_point < 0.0f) {
        string_builder_push(sb, "-");
        floating_point = -floating_point;
    }
    
    u64 whole_part = (u64) floating_point;
    string_print_unsigned_integer(sb, whole_part);
    string_builder_push(sb, ".");
    
    f64 fractional_part = floating_point - (f64) whole_part;
    
    [6]u8 fractional_digits;
    
    for (int i = 0; i < fractional_digits.count; i++) {
        fractional_part *= 10.0f;
        u8 digit = (u8) fractional_part;
        fractional_digits[i] = '0' + (u8) digit;
        fractional_part -= (f64) digit;
    }
    
    string test;
    test.data = fractional_digits.data;
    test.count = fractional_digits.count;
    string_builder_push(sb, test);
}

#define pln(format, ...) print(format##"\n", __VA_ARGS__)
// Below one tells you location of your prints
//#define pln(format, ...) print(__FILE__##":"##__LINE__##": "##format##"\n", __VA_ARGS__)

inline void
print(string format, ...var_args) {
    String_Builder sb;
    string_builder_push_vformat(&sb, format, var_args);
    string result = string_builder_to_string_nocopy(&sb);
    _put_string(result);
    string_builder_free(&sb);
}

inline string
string_print(string format, ...var_args) {
    String_Builder sb;
    string_builder_push_vformat(&sb, format, var_args);
    
    string result = string_builder_to_string(&sb);
    string_builder_free(&sb);
    return result
}

inline void
string_builder_push_format(String_Builder* sb, string format, ...var_args) {
    string_builder_push_vformat(sb, format, var_args);
}

void
string_builder_push_vformat(String_Builder* sb, string format, Var_Args var_args) {
    int var_args_index = 0;
    u8* var_arg_data = var_args.data;
    
    string substring;
    substring.data = format.data;
    substring.count = 0;
    
    for (smm chr_index = 0; chr_index < format.count; chr_index++) {
        u8 chr = format.data[chr_index];
        
        if (chr == '%') {
            smm cnt = var_args.types.count;
            if (var_args_index < cnt) {
                string_builder_push(sb, substring);
                substring.data = format.data + chr_index + 1;
                substring.count = 0;
                
                Var_Arg arg = var_args.types[var_args_index];
                // TODO(Alexander): this is a bit of a hack becuase
                // data sizes > 8 are passed as pointer, as specified by callign convention.
                if (arg.data_size > 8) {
                    string_print_data_from_type_info(sb, arg.type, *((void**) var_arg_data));
                } else {
                    string_print_data_from_type_info(sb, arg.type, var_arg_data);
                }
                var_args_index++;
                // NOTE(Alexander): if data doesn't fit in 8 bytes, store a pointer instead
                var_arg_data += 8;
            } else {
                substring.count++;
            }
        } else {
            substring.count++;
        }
    }
    
#if 0
    // Push remaining args
    smm cnt = var_args.types.count;
    for (; var_args_index < cnt; var_args_index++) {
        // TODO(Alexander): copy pasta from above
        Var_Arg arg = var_args.types[var_args_index];
        // TODO(Alexander): this is a bit of a hack becuase
        // data sizes > 8 are passed as pointer, as specified by callign convention.
        if (arg.data_size > 8) {
            string_print_data_from_type_info(sb, arg.type, *((void**) var_arg_data));
        } else {
            string_print_data_from_type_info(sb, arg.type, var_arg_data);
        }
        var_arg_data += 8;
    }
#endif
    
    string_builder_push(sb, substring);
}

void
string_print_data_from_type_info(String_Builder* sb, Type_Info* type, void* data, int indent=0) {
    switch (type.kind) {
        case Type_Kind.Basic: {
            switch (type.Basic) {
                case Basic_Type_Info.Bool: {
                    if (*((bool*) data)) {
                        string_builder_push(sb, "true");
                    } else {
                        string_builder_push(sb, "false");
                    }
                }
                
                case Basic_Type_Info.S8:
                case Basic_Type_Info.S16:
                case Basic_Type_Info.S32:
                case Basic_Type_Info.S64: {
                    s64 num = data_to_s64(type.Basic, data);
                    string_print_signed_integer(sb, num);
                }
                
                case Basic_Type_Info.U8:
                case Basic_Type_Info.U16:
                case Basic_Type_Info.U32:
                case Basic_Type_Info.U64: {
                    u64 num = data_to_u64(type.Basic, data);
                    string_print_unsigned_integer(sb, num);
                }
                
                case Basic_Type_Info.F32:
                case Basic_Type_Info.F64: {
                    f64 num = data_to_f64(type.Basic, data);
                    string_print_floating_point(sb, num);
                }
                
                case Basic_Type_Info.String: {
                    string_builder_push(sb, *((string*) data));
                }
                
                case Basic_Type_Info.CString: {
                    cstring cstr = *((cstring*) data);
                    string s;
                    s.data = (u8*) cstr;
                    s.count = cstring_count(cstr);
                    string_builder_push(sb, s);
                }
            }
        }
        
        case Type_Kind.Pointer: {
            u64 num = (u64) data_to_u64(Basic_Type_Info.U64, data);
            string_builder_push(sb, "0x");
            string_print_unsigned_hex_integer(sb, num);
        }
        
        case Type_Kind.Enum: {
            s64 value = 0;
            switch (type.Enum.type.kind) {
                case Basic_Type_Info.S8:
                case Basic_Type_Info.S16:
                case Basic_Type_Info.S32:
                case Basic_Type_Info.S64: {
                    value = data_to_s64(type.Enum.type.kind, data);
                }
                
                case Basic_Type_Info.U8:
                case Basic_Type_Info.U16:
                case Basic_Type_Info.U32:
                case Basic_Type_Info.U64: {
                    value = data_to_u64(type.Enum.type.kind, data);
                }
            }
            
            string_builder_push_format(sb, "%.", type.Enum.ident);
            if (value >= 0 && value < type.Enum.names.count) {
                string_builder_push_format(sb, "% (%)", type.Enum.names[value], value);
            } else {
                string_builder_push_format(sb, "%", value);
            }
        }
        
        case Type_Kind.Array: {
            string_builder_push(sb, "{ ");
            
            // TODO(Alexander): find a better way to deserialize arrays
            Fixed_Array arr;
            if (type.Array.fixed_count >= 0) {
                arr.data = data;
                arr.count = type.Array.fixed_count;
            } else {
                arr = *((Fixed_Array*) data);
            }
            
            Type_Info* elem_type = type.Array.elem_type;
            
            const int max_elements_to_show = 5;
            
            for (int array_index = 0; 
                 array_index < arr.count && array_index < max_elements_to_show; 
                 array_index++) {
                
                if (elem_type.kind != Type_Kind.Basic) {
                    print_newline_with_spaces(sb, indent + 4);
                }
                
                smm offset = type.Array.elem_size*array_index;
                
                bool doubleQuoted = (elem_type.kind == Type_Kind.Basic &&
                                     elem_type.Basic == Basic_Type_Info.String);
                if (doubleQuoted) {
                    string_builder_push(sb, "\"");
                }
                string_print_data_from_type_info(sb, elem_type, (u8*) arr.data + offset, indent + 4);
                if (doubleQuoted) {
                    string_builder_push(sb, "\"");
                }
                
                if (array_index + 1 < arr.count) {
                    string_builder_push(sb, ", ");
                }
            }
            
            if (arr.count >= max_elements_to_show) {
                if (elem_type.kind != Type_Kind.Basic) {
                    print_newline_with_spaces(sb, indent + 4);
                }
                string_builder_push_format(sb, "...+% more", arr.count - max_elements_to_show);
            }
            
            if (elem_type.kind != Type_Kind.Basic) {
                print_newline_with_spaces(sb, indent);
                string_builder_push(sb, "}");
            } else {
                string_builder_push(sb, " }");
            }
        }
        
        case Type_Kind.Union:
        case Type_Kind.Struct: {
            string_builder_push_format(sb, "% {", type.Struct.ident);
            indent += 4;
            
            for (int field_index = 0; field_index < type.Struct.fields.count; field_index++) {
                Struct_Field_Info field = type.Struct.fields[field_index];
                if (field.offset == 0 && type.kind == Type_Kind.Union && field_index > 0) {
                    break;
                }
                
                print_newline_with_spaces(sb, indent);
                string_builder_push_format(sb, "%: ", field.ident);
                string_print_data_from_type_info(sb, field.type, (u8*) data + field.offset, indent);
                
                if (field_index + 1 < type.Struct.fields.count) {
                    string_builder_push(sb, ", ");
                }
            }
            indent -= 4;
            print_newline_with_spaces(sb, indent);
            string_builder_push(sb, "}");
            
            if (indent == 0) {
                string_builder_push(sb, "\n");
            }
        }
    }
}

#define print_var(var) \
print_data_from_type_info(type_of(var), &var);

struct Dynamic_Function {
    void* pointer;
    string name;
    //Type_Info* type_info; // TODO: maybe we want the type info (we don't support function type info yet)
};

struct Dynamic_Library {
    []Dynamic_Function functions;
}

