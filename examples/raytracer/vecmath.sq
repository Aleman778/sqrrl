
struct v3 {
    f32 x;
    f32 y;
    f32 z;
}

struct ray {
    v3 origin;
    v3 direction;
}

v3
ray_at(ray r, f32 t) {
    v3 v = vec3_scale(r.direction, t);
    return vec3_add(r.origin, v);
}

inline v3
vec3(f32 x, f32 y, f32 z) {
    v3 result;
    result.x = x;
    result.y = y;
    result.z = z;
    return result;
}

inline v3
vec3_add(v3 a, v3 b) {
    v3 result;
    result.x = a.x + b.x;
    result.y = a.y + b.y;
    result.z = a.z + b.z;
    return result;
}

inline v3
vec3_sub(v3 a, v3 b) {
    v3 result;
    result.x = a.x - b.x;
    result.y = a.y - b.y;
    result.z = a.z - b.z;
    return result;
}

inline v3
vec3_mul(v3 a, v3 b) {
    v3 result;
    result.x = a.x * b.x;
    result.y = a.y * b.y;
    result.z = a.z * b.z;
    return result;
}

inline v3
vec3_scale(v3 v, f32 s) {
    v3 result;
    result.x = v.x * s;
    result.y = v.y * s;
    result.z = v.z * s;
    return result;
}

inline f32
vec3_dot(v3 a, v3 b) {
    return a.x*b.x + a.y*b.y + a.z*b.z;
}

inline v3
vec3_div(v3 a, v3 b) {
    v3 result;
    result.x = a.x / b.x;
    result.y = a.y / b.y;
    result.z = a.z / b.z;
    return result;
}

inline v3
vec3_cross(v3 a, v3 b) {
    v3 result;
    result.x = a.y * b.z - a.z * b.y;
    result.x = a.z * b.x - a.x * b.z;
    result.x = a.x * b.y - a.y * b.x;
    return result;
}

inline f32
vec3_length_squared(v3 v) {
    return v.x*v.x + v.y*v.y + v.z*v.z;
}

inline f32
vec3_length(v3 v) {
    return sqrt(v.x*v.x + v.y*v.y + v.z*v.z);
}

inline v3
vec3_normalize(v3 v) {
    f32 length = vec3_length(v);
    f32 inv_length = 1.0f / length;
    v3 result = vec3_scale(v, inv_length);
    return result;
}

inline void
print_vec3(v3 v) {
    pln("vec3(%, %, %)", v.x, v.y, v.z);
}
