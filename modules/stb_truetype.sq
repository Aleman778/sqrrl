// Sqrrl bindings of `stb_truetype.h` library
// Source: https://github.com/nothings/stb/blob/master/stb_truetype.h

struct stbtt__buf {
    u8* data;
    int cursor;
    int size;
}


struct stbtt_fontinfo {
    void* userdata;
    u8* data;              // pointer to .ttf file
    int fontstart;         // offset of start of font
    
    int numGlyphs;                     // number of glyphs, needed for range checking
    
    int loca,head,glyf,hhea,hmtx,kern,gpos,svg; // table locations as offset from start of .ttf
    int index_map;                     // a cmap mapping for our chosen character encoding
    int indexToLocFormat;              // format needed to map from glyph index to glyph
    
    stbtt__buf cff;                    // cff font data
    stbtt__buf charstrings;            // the charstring index
    stbtt__buf gsubrs;                 // global charstring subroutines index
    stbtt__buf subrs;                  // private charstring subroutines index
    stbtt__buf fontdicts;              // array of font dicts
    stbtt__buf fdselect;               // map from glyph to fontdict
}


@link("stb_truetype.dll")
extern {
    // TODO: add more of the functions
    
    int stbtt_InitFont(stbtt_fontinfo *info, const u8 *data, int offset);
    // Given an offset into the file that defines a font, this function builds
    // the necessary cached info for the rest of the system. You must allocate
    // the stbtt_fontinfo yourself, and stbtt_InitFont will fill it out. You don't
    // need to do anything special to free it, because the contents are pure
    // value data with no additional data structures. Returns 0 on failure.
    
    int stbtt_GetNumberOfFonts(const u8 *data);
    // This function will determine the number of fonts in a font file.  TrueType
    // collection (.ttc) files may contain multiple fonts, while TrueType font
    // (.ttf) files only contain one font. The number of fonts can be used for
    // indexing with the previous function where the index is between zero and one
    // less than the total fonts. If an error occurs, -1 is returned.
    
    int stbtt_GetFontOffsetForIndex(const u8 *data, int index);
    // Each .ttf/.ttc file may have more than one font. Each font has a sequential
    // index number starting from 0. Call this function to get the font offset for
    // a given index; it returns -1 if the index is out of range. A regular .ttf
    // file will only define one font and it always be at offset 0, so it will
    // return '0' for index 0, and -1 for all other indices.
    
    
    //////////////////////////////////////////////////////////////////////////////
    //
    // CHARACTER TO GLYPH-INDEX CONVERSIOn
    
    int stbtt_FindGlyphIndex(const stbtt_fontinfo *info, int unicode_codepoint);
    // If you're going to perform multiple operations on the same character
    // and you want a speed-up, call this function with the character you're
    // going to process, then use glyph-based functions instead of the
    // codepoint-based functions.
    // Returns 0 if the character codepoint is not defined in the font.
    
    
    //////////////////////////////////////////////////////////////////////////////
    //
    // CHARACTER PROPERTIES
    //
    
    f32 stbtt_ScaleForPixelHeight(const stbtt_fontinfo *info, f32 pixels);
    // computes a scale factor to produce a font whose "height" is 'pixels' tall.
    // Height is measured as the distance from the highest ascender to the lowest
    // descender; in other words, it's equivalent to calling stbtt_GetFontVMetrics
    // and computing:
    //       scale = pixels / (ascent - descent)
    // so if you prefer to measure height by the ascent only, use a similar calculation.
    
    f32 stbtt_ScaleForMappingEmToPixels(const stbtt_fontinfo *info, f32 pixels);
    // computes a scale factor to produce a font whose EM size is mapped to
    // 'pixels' tall. This is probably what traditional APIs compute, but
    // I'm not positive.
    
    void stbtt_GetFontVMetrics(const stbtt_fontinfo *info, int *ascent, int *descent, int *lineGap);
    // ascent is the coordinate above the baseline the font extends; descent
    // is the coordinate below the baseline the font extends (i.e. it is typically negative)
    // lineGap is the spacing between one row's descent and the next row's ascent...
    // so you should advance the vertical position by "*ascent - *descent + *lineGap"
    //   these are expressed in unscaled coordinates, so you must multiply by
    //   the scale factor for a given size
    
    int  stbtt_GetFontVMetricsOS2(const stbtt_fontinfo *info, int *typoAscent, int *typoDescent, int *typoLineGap);
    // analogous to GetFontVMetrics, but returns the "typographic" values from the OS/2
    // table (specific to MS/Windows TTF files).
    //
    // Returns 1 on success (table present), 0 on failure.
    
    void stbtt_GetFontBoundingBox(const stbtt_fontinfo *info, int *x0, int *y0, int *x1, int *y1);
    // the bounding box around all possible characters
    
    void stbtt_GetCodepointHMetrics(const stbtt_fontinfo *info, int codepoint, int *advanceWidth, int *leftSideBearing);
    // leftSideBearing is the offset from the current horizontal position to the left edge of the character
    // advanceWidth is the offset from the current horizontal position to the next horizontal position
    //   these are expressed in unscaled coordinates
    
    int  stbtt_GetCodepointKernAdvance(const stbtt_fontinfo *info, int ch1, int ch2);
    // an additional amount to add to the 'advance' value between ch1 and ch2
    
    int stbtt_GetCodepointBox(const stbtt_fontinfo *info, int codepoint, int *x0, int *y0, int *x1, int *y1);
    // Gets the bounding box of the visible part of the glyph, in unscaled coordinates
    
    void stbtt_GetGlyphHMetrics(const stbtt_fontinfo *info, int glyph_index, int *advanceWidth, int *leftSideBearing);
    int  stbtt_GetGlyphKernAdvance(const stbtt_fontinfo *info, int glyph1, int glyph2);
    int  stbtt_GetGlyphBox(const stbtt_fontinfo *info, int glyph_index, int *x0, int *y0, int *x1, int *y1);
    //////////////////////////////////////////////////////////////////////////////
    //
    // BITMAP RENDERING
    //
    
    void stbtt_FreeBitmap(u8 *bitmap, void *userdata);
    // frees the bitmap allocated below
    
    u8 *stbtt_GetCodepointBitmap(const stbtt_fontinfo *info, f32 scale_x, f32 scale_y, int codepoint, int *width, int *height, int *xoff, int *yoff);
    // allocates a large-enough single-channel 8bpp bitmap and renders the
    // specified character/glyph at the specified scale into it, with
    // antialiasing. 0 is no coverage (transparent), 255 is fully covered (opaque).
    // *width & *height are filled out with the width & height of the bitmap,
    // which is stored left-to-right, top-to-bottom.
    //
    // xoff/yoff are the offset it pixel space from the glyph origin to the top-left of the bitmap
    
    u8 *stbtt_GetCodepointBitmapSubpixel(const stbtt_fontinfo *info, f32 scale_x, f32 scale_y, f32 shift_x, f32 shift_y, int codepoint, int *width, int *height, int *xoff, int *yoff);
    // the same as stbtt_GetCodepoitnBitmap, but you can specify a subpixel
    // shift for the character
    
    void stbtt_MakeCodepointBitmap(const stbtt_fontinfo *info, u8 *output, int out_w, int out_h, int out_stride, f32 scale_x, f32 scale_y, int codepoint);
    // the same as stbtt_GetCodepointBitmap, but you pass in storage for the bitmap
    // in the form of 'output', with row spacing of 'out_stride' bytes. the bitmap
    // is clipped to out_w/out_h bytes. Call stbtt_GetCodepointBitmapBox to get the
    // width and height and positioning info for it first.
    
    void stbtt_MakeCodepointBitmapSubpixel(const stbtt_fontinfo *info, u8 *output, int out_w, int out_h, int out_stride, f32 scale_x, f32 scale_y, f32 shift_x, f32 shift_y, int codepoint);
    // same as stbtt_MakeCodepointBitmap, but you can specify a subpixel
    // shift for the character
    
    void stbtt_MakeCodepointBitmapSubpixelPrefilter(const stbtt_fontinfo *info, u8 *output, int out_w, int out_h, int out_stride, f32 scale_x, f32 scale_y, f32 shift_x, f32 shift_y, int oversample_x, int oversample_y, f32 *sub_x, f32 *sub_y, int codepoint);
    // same as stbtt_MakeCodepointBitmapSubpixel, but prefiltering
    // is performed (see stbtt_PackSetOversampling)
    
    void stbtt_GetCodepointBitmapBox(const stbtt_fontinfo *font, int codepoint, f32 scale_x, f32 scale_y, int *ix0, int *iy0, int *ix1, int *iy1);
    // get the bbox of the bitmap centered around the glyph origin; so the
    // bitmap width is ix1-ix0, height is iy1-iy0, and location to place
    // the bitmap top left is (leftSideBearing*scale,iy0).
    // (Note that the bitmap uses y-increases-down, but the shape uses
    // y-increases-up, so CodepointBitmapBox and CodepointBox are inverted.)
    
    void stbtt_GetCodepointBitmapBoxSubpixel(const stbtt_fontinfo *font, int codepoint, f32 scale_x, f32 scale_y, f32 shift_x, f32 shift_y, int *ix0, int *iy0, int *ix1, int *iy1);
    // same as stbtt_GetCodepointBitmapBox, but you can specify a subpixel
    // shift for the character
    
    // the following functions are equivalent to the above functions, but operate
    // on glyph indices instead of Unicode codepoints (for efficiency)
    u8 *stbtt_GetGlyphBitmap(const stbtt_fontinfo *info, f32 scale_x, f32 scale_y, int glyph, int *width, int *height, int *xoff, int *yoff);
    u8 *stbtt_GetGlyphBitmapSubpixel(const stbtt_fontinfo *info, f32 scale_x, f32 scale_y, f32 shift_x, f32 shift_y, int glyph, int *width, int *height, int *xoff, int *yoff);
    void stbtt_MakeGlyphBitmap(const stbtt_fontinfo *info, u8 *output, int out_w, int out_h, int out_stride, f32 scale_x, f32 scale_y, int glyph);
    void stbtt_MakeGlyphBitmapSubpixel(const stbtt_fontinfo *info, u8 *output, int out_w, int out_h, int out_stride, f32 scale_x, f32 scale_y, f32 shift_x, f32 shift_y, int glyph);
    void stbtt_MakeGlyphBitmapSubpixelPrefilter(const stbtt_fontinfo *info, u8 *output, int out_w, int out_h, int out_stride, f32 scale_x, f32 scale_y, f32 shift_x, f32 shift_y, int oversample_x, int oversample_y, f32 *sub_x, f32 *sub_y, int glyph);
    void stbtt_GetGlyphBitmapBox(const stbtt_fontinfo *font, int glyph, f32 scale_x, f32 scale_y, int *ix0, int *iy0, int *ix1, int *iy1);
    void stbtt_GetGlyphBitmapBoxSubpixel(const stbtt_fontinfo *font, int glyph, f32 scale_x, f32 scale_y,f32 shift_x, f32 shift_y, int *ix0, int *iy0, int *ix1, int *iy1);
}
