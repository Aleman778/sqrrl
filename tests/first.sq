#include <test_support.sq>

#include "string.sq"
#include "float_math.sq"
#include "struct.sq"
#include "vector_math.sq"
#include "fixed_array.sq"

void
@test_proc
int_neg() {
    int x = 42;
    int y = -x;
    assert(y == -42);
    y = -y;
    assert(y == 42);
    assert(-(-y) == 42);
}

void
@test_proc
bool_logical_not() {
    bool flag = true;
    assert(!flag == false);
    assert(!!flag == true);
}

void
@test_proc
int_logical_not() {
    int flag = 1123123;
    assert(!flag == false);
    assert(!!flag == true);
}

void
@test_proc
int_add_operator() {
    int x = 10;
    x = x + 10;
    assert(x == 20);
}

void
@test_proc
bool_and_operator() {
    bool x = true;
    x = x && true;
    assert(x);
    
    x = false;
    x = x && true;
    assert(!x);
    
    x = true;
    x = x && false;
    assert(!x);
    
    x = false;
    x = x && false;
    assert(!x);
}

void
@test_proc
int_and_operator() {
    int x = 4234;
    x = x && 0xFF0000;
    assert(x);
    
    x = 0x0;
    x = x && 1231;
    assert(!x);
    
    x = 0xFF0000;
    x = x && 0;
    assert(!x);
    
    x = 0;
    x = x && 0;
    assert(!x);
}

void
@test_proc
bool_or_operator() {
    bool x = true;
    x = x || true;
    assert(x);
    
    x = false;
    x = x || true;
    assert(x);
    
    x = true;
    x = x || false;
    assert(x);
    
    x = false;
    x = x || false;
    assert(!x);
}

void
@test_proc
int_or_operator() {
    int x = 1231;
    x = x || 0xFF0000;
    assert(x);
    
    x = 0x0;
    x = x || 633;
    assert(x);
    
    x = 0xFF0000;
    x = x || 0;
    assert(x);
    
    x = 0;
    x = x || 0;
    assert(!x);
} 

void
@test_proc
int_equals_operator() {
    int x = 10;
    bool y = x == 10;
    assert(y);
    
    y = x == 11;
    assert(!y);
}

void
@test_proc
truncating_integer() {
    s64 x = (s64) 140234230023;
    assert((s32) x == -1499690745);
}

typedef void my_void;

void
@test_proc
void_ptr_assign_and_int_casting() {
    my_void* x = (my_void*) 1000;
    int* y = (int*) x;
    assert((int) y == 1000);
}

void
@test_proc
sign_extend_and_wrapping_integers() {
    s8 x = cast(s8) -10;
    x += (s8) 200u;
    
    int y = (int) x;
    assert(y == -66);
}

void
@test_proc
ref_operator() {
    int x = 10;
    int* y = &x;
    int* z = &x;
    assert(y == z);
}

void
@test_proc
float_to_int() {
    f32 x = 4.4f + 4.4f;
    int y = (int) x;
    assert(y == 8);
}

void
@test_proc
ref_and_deref_operator() {
    int x = 10;
    int* y = &x;
    int z = *y;
    assert(x == z);
}

void
@test_proc
ref_and_assign_operator() {
    s32 x = 10;
    s32* z = &x;
    *z = 20;
    assert(x == 20);
}

int
test_func() {
    int x = 10;
    x = x + 20;
    return x;
}

void
@test_proc
function_with_no_arguments() {
    int x = test_func();
    assert(x == 30);
}

int
test_add(int x, int y) {
    return x + y;
}

void
@test_proc
function_with_two_arguments() {
    int x = test_add(10, 20);
    assert(x == 30);
}

int
test_many_parameters(int a, int b, int c, int d, int e, int f) {
    return a + b + c + d + e + f;
}

void
@test_proc
function_with_many_arguments() {
    int x = test_many_parameters(1, 2, 3, 4, 5, 6);
    
    assert(x == 21);
}

u8
combine_bytes(s32 a, s32 b, s32 c, s64 d, s64 x) {
    return (u8) x + (u8) a + (u8) b + (u8) c + (u8) d;
}

int
@test_proc
many_arguments_including_s64_number() {
    int x = (int) combine_bytes(1, 2, 3, 4, 1423423458093845);
    assert(x == 31);
    
    x = (int) combine_bytes(1, 2, 3, 1423423458093845, 4);
    assert(x == 31);
}

void 
@test_proc
if_statements() {
    int x = 10;
    if (x == 10) {
        x += 10;
    } else {
        x -= 10;
    }
    assert(x == 20);
}

void
@test_proc
if_statement_no_else() {
    int x = 10;
    if (x > 5) {
        x += 10;
    }
    assert(x == 20);
}

void
@test_proc
else_if_statements() {
    int x = 10;
    if (x < 0) {
        assert(0);
    } else if (x < 10) {
        assert(0);
    } else if (x < 100) {
        assert(1);
    } else {
        assert(0);
    }
}

void
@test_proc
for_loop() {
    int x = 10;
    int y = 0;
    for (int i = 0; i < x; i += 1) {
        y += 2;
    }
    
    assert(y == 20);
}

void 
@test_proc
while_loop() {
    int x = 0;
    while (x < 25) {
        x += 1;
    }
    assert(x == 25);
}

struct v2s {
    int x, y;
}

void
@test_proc
struct_v2s() {
    v2s v = { x: 5, y: -12 };
    assert(v.x + v.y == -7);
}

void
v2s_ptr_scale(v2s* v, s32 s) {
    v.x *= s;
    v.y *= s;
}

void
@test_proc
modify_struct_v2s_via_call_as_ptr() {
    v2s v = { x: 5, y: -12 };
    v2s_ptr_scale(&v, 10);
    assert(v.x + v.y == -70);
}

void
v2s_scale(v2s v, s32 s) {
    v.x *= s;
    v.y *= s;
}

void
@test_proc
no_modify_struct_v2s_via_call_as_copy() {
    v2s v = { x: 5, y: -12 };
    v2s_scale(v, 10);
    assert(v.x + v.y == -7);
}

void
check_int(int val) {
    assert(val == 42);
}

void
pass_value_to_callback(void cb(int)*, int val) {
    cb(val);
}

void
@test_proc
call_function_pointer_with_arg() {
    pass_value_to_callback(&check_int, 42);
}

typedef void callback(int);

void
pass_value_to_typedef_callback(callback* cb, int val) {
    cb(val);
}

void
@test_proc
call_typedef_function_pointer_with_arg() {
    pass_value_to_typedef_callback(&check_int, 42);
}

struct Vtbl {
    int adder(int x, int y)*;
}

void
@test_proc
virtual_function_table() {
    Vtbl vtbl = {};
    vtbl.adder = &test_add;
    
    assert(vtbl.adder(10, 20) == 30);
}

int
fill_stack_with_nonsense() {
    int x = 10;
    int y = 20;
    int x1 = 10;
    int y1 = 20;
    return x + y + x1 + y1;
}

int
uninitialized_value_add() {
    int x;
    int y;
    return x + y;
}

void
@test_proc
int_uninitialized_is_always_zero() {
    fill_stack_with_nonsense();
    int x = uninitialized_value_add();
    assert(x == 0);
}

int
uninitialized_value_a_less_10(int a) {
    int x;
    if (a > 10) {
        x = 10;
    }
    return x;
}

void
@test_proc
int_uninitialized_conditionally_is_always_zero() {
    fill_stack_with_nonsense();
    int x = uninitialized_value_a_less_10(5);
    assert(x == 0);
    x = uninitialized_value_a_less_10(20);
    assert(x == 10);
}

int
uninitialized_v2s_struct_add() {
    v2s v;
    return v.x + v.y;
}

void
@test_proc
v2s_uninitialized_struct_is_always_zero() {
    fill_stack_with_nonsense();
    int x = uninitialized_v2s_struct_add();
    assert(x == 0);
}

int
uninitialized_array_add() {
    [2]int v;
    return v[0] + v[1];
}

void
@test_proc
v2s_uninitialized_array_is_always_zero() {
    fill_stack_with_nonsense();
    int x = uninitialized_array_add();
    assert(x == 0);
}
